/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.icaelement2.gui;

import com.mycompany.icaelement2.ASCStockItem;
import com.mycompany.icaelement2.ASCStockItemInterface;
import com.mycompany.icaelement2.MSMStockItem;
import com.mycompany.icaelement2.MSMStockItemAdapter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author zeesh
 */
public class StockForm extends javax.swing.JFrame implements Observer, DisplayElement {
    
    private final  List<ASCStockItem> ascStockList;
    
    private final List<MSMStockItemAdapter> msmStockList = createMSMStock();
    List<ASCStockItemInterface> combinedStocks = new ArrayList<>();
    
    
     

    /**
     * Creates new form StockForm
     */
    public StockForm() {
        this.ascStockList = createASCStock();
        initComponents();
        
        combinedStocks.addAll(ascStockList);
        combinedStocks.addAll(msmStockList);
        
        Stocktable.setModel(new StockTableModel(combinedStocks));
    }
    public StockForm(Subject st) { 
        this.ascStockList = createASCStock();
        st.registerObserver(this);
        
    }
    
    
    private static List<ASCStockItem> createASCStock(){
        List<ASCStockItem> stocks = ASCStockItem.loadStockCSV();
        return stocks;
    }
    private static List<MSMStockItemAdapter> createMSMStock(){
        List<MSMStockItem> stocks2 = MSMStockItem.loadStock();
        List<MSMStockItemAdapter> msmStockAdapter = new ArrayList<>();
        for(MSMStockItem m: stocks2){
            msmStockAdapter.add(new MSMStockItemAdapter(m));
        }
        return msmStockAdapter;
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Stocktable = new javax.swing.JTable();
        Sell = new javax.swing.JButton();
        Buy = new javax.swing.JButton();
        AddStock = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Stocktable);

        Sell.setText("Sell");
        Sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellActionPerformed(evt);
            }
        });

        Buy.setText("Buy");
        Buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyActionPerformed(evt);
            }
        });

        AddStock.setText("Add Stock");
        AddStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStockActionPerformed(evt);
            }
        });

        jLabel1.setText("Stock Control with Low Stock Reporting");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AddStock, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Buy, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Sell, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sell)
                    .addComponent(Buy)
                    .addComponent(AddStock))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    when Buy button is clicked
    */
    private void BuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyActionPerformed
        // TODO add your handling code here:
        int selectedRow=Stocktable.getSelectedRow();
                if(selectedRow<0) {
            JOptionPane.showMessageDialog(rootPane,"select a stock to buy");
            return;
        }
        String k= JOptionPane.showInputDialog("enter the quantity to buy");
        if(k==null || k.isEmpty()) return;
        
        int qtyToBuy=Integer.parseInt(k);
        
        if(selectedRow<ascStockList.size()){
        ASCStockItem a = ascStockList.get(selectedRow);
        a.buyStock(qtyToBuy);
        try {
                a.updateCSV("ICAelement2/src/data/AshersSportsCollective.csv",a.getQtyInStock(),selectedRow,5);
            } catch (IOException ex) {
                Logger.getLogger(ASCStockItem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
        ASCStockItemInterface b = combinedStocks.get(selectedRow);
        b.buyStock(qtyToBuy);
        try {
                b.updateCSV("src/data/MengdaStock.csv",b.getQtyInStock(),selectedRow-ascStockList.size(),4);
            } catch (IOException ex) {
                Logger.getLogger(ASCStockItem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Stocktable.updateUI();
    }//GEN-LAST:event_BuyActionPerformed

    /*
    when sell action is performed
    */
    private void SellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellActionPerformed
        // TODO add your handling code here:
        int selectedRow=Stocktable.getSelectedRow();
        if(selectedRow<0) {
            JOptionPane.showMessageDialog(rootPane,"select a stock to sell");
            return;
        }
        String k= JOptionPane.showInputDialog("enter the quantity to sell");
        if(k==null || k.isEmpty()) return;
        int qtyToSell=Integer.parseInt(k);
        StockData stockData = new StockData();

        // create an observer
        StockForm stockForm = new StockForm(stockData);
        if(selectedRow<ascStockList.size()){
            ASCStockItem a = ascStockList.get(selectedRow);
            if(a.getQtyInStock()==0) JOptionPane.showMessageDialog(rootPane, "No stock left to sell");
            else if(qtyToSell>a.getQtyInStock()) JOptionPane.showMessageDialog(rootPane, "desired quantity not available");
            else{
            a.sellStock(qtyToSell);
            try {
                a.updateCSV("ICAelement2/src/data/AshersSportsCollective.csv",a.getQtyInStock(),selectedRow,5);
                a.writeCSV("ICAelement2/src/data/SalesRecord.csv",LocalDateTime.now(),a.getProductCode(),a.getUnitPriceInPounds(),qtyToSell);
            } catch (IOException ex) {
                Logger.getLogger(StockForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            stockData.checkStock(a.getQtyInStock(),a.getProductCode());
            }
        }
        else if(selectedRow>=ascStockList.size()){
            ASCStockItemInterface b = combinedStocks.get(selectedRow);
            if(b.getQtyInStock()==0) JOptionPane.showMessageDialog(rootPane, "No stock left to sell");
            else if(qtyToSell>b.getQtyInStock()) JOptionPane.showMessageDialog(rootPane, "desired quantity not available");
            else{
            b.sellStock(qtyToSell); 
          try {
                b.updateCSV("src/data/MengdaStock.csv",b.getQtyInStock(),selectedRow-ascStockList.size(),4);
                b.writeCSV("src/data/SalesRecord.csv",LocalDateTime.now(),b.getProductCode(),b.getUnitPriceInPounds(),qtyToSell);
            } catch (IOException ex) {
                Logger.getLogger(StockForm.class.getName()).log(Level.SEVERE, null, ex);
            }
          stockData.checkStock(b.getQtyInStock(),b.getProductCode());
        }
        }
        
        Stocktable.updateUI();
    }//GEN-LAST:event_SellActionPerformed

    /*
    Adding an additional new stock
    */
    private void AddStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStockActionPerformed
        // TODO add your handling code here:
        String code=JOptionPane.showInputDialog("enter the code"); if(code==null) return;
        String Title=JOptionPane.showInputDialog("enter the title");if(Title==null) return;
        String Desc=JOptionPane.showInputDialog("enter the desc");if(Desc==null) return;
        String unitp=JOptionPane.showInputDialog("enter the pounds");if(unitp==null) return;
        String unitpp=JOptionPane.showInputDialog("enter the pence");if(unitpp==null) return;
        String qty=JOptionPane.showInputDialog("enter the qty");if(qty==null) return;
        try {
            ASCStockItem.writeStockCSV("ICAelement2/src/data/AshersSportsCollective.csv", code, Title, Desc, unitp, unitpp, qty);
        } catch (IOException ex) {
            Logger.getLogger(StockForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        Stocktable.updateUI();
        Stocktable.setVisible(true);
    }//GEN-LAST:event_AddStockActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddStock;
    private javax.swing.JButton Buy;
    private javax.swing.JButton Sell;
    private javax.swing.JTable Stocktable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    

    @Override
    public void updateqty(int qty, String code) {
            display(code,qty);
    }
    /*
    Observer pattern implementation example
    */
    @Override
    public void display(String code, int sold) {
        JOptionPane.showMessageDialog(Stocktable, code +" quantity left: "+ sold,"Low-Stock alert", JOptionPane.WARNING_MESSAGE); 
        System.out.println("warning: Low Stock Alert");
        System.out.println(code+" quantity left: "+ sold);// Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
